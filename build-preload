#!/bin/bash
# Build script for preload libraries using glibc toolchains
# This is separate from the main build system to keep things clean
set -e

# Source architecture mapping
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
if [ -f "$SCRIPT_DIR/scripts/lib/arch_map.sh" ]; then
    source "$SCRIPT_DIR/scripts/lib/arch_map.sh"
fi

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR"

# Default values
LIBRARIES="all"
ARCHITECTURES="all"
DEBUG=""
CLEAN=false
INTERACTIVE=false
LIBC_TYPE="both"

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --arch)
            ARCHITECTURES="$2"
            shift 2
            ;;
        -d|--debug)
            DEBUG="1"
            shift
            ;;
        --clean)
            CLEAN=true
            shift
            ;;
        -i|--interactive)
            INTERACTIVE=true
            shift
            ;;
        --libc)
            LIBC_TYPE="$2"
            shift 2
            ;;
        --both)
            LIBC_TYPE="both"
            shift
            ;;
        --help|-h)
            cat << EOF
Usage: $0 [LIBRARY] [OPTIONS]

Build preload libraries for debugging and analysis using glibc toolchains.

LIBRARY:
  all                Build all preload libraries (default)
  libdesock          Socket desocketing library for fuzzing (glibc only)
  shell-env          Execute commands from EXEC_CMD environment variable
  shell-helper       Execute /dev/shm/helper.sh script
  shell-bind         Open bind shell on BIND_PORT (default: 4444)
  shell-reverse      Reverse shell to RHOST:RPORT (default port: 4444)
  shell-fifo         Execute commands from FIFO_PATH (default: /tmp/cmd.fifo)

OPTIONS:
  --arch ARCH      Build for specific architecture only
  --arch all       Build for all architectures (default)
  -d, --debug      Debug mode (verbose output)
  -i, --interactive  Launch interactive shell in build container
  --clean          Clean output and toolchain directories
  --libc TYPE      Build with specific libc (glibc or musl, default: both)
  --both           Build with both glibc and musl (default)

ARCHITECTURES:
  x86_64 aarch64 arm32v7le i486 mips64le ppc64le riscv64 s390x
  aarch64be mips64 armv5 armv6 ppc32 sparc64 sh4 mips32 mips32el
  riscv32 microblazeel microblazebe nios2 openrisc arcle xtensa m68k

EXAMPLES:
  $0                              # Build all libraries for all architectures
  $0 libdesock                    # Build libdesock for all architectures
  $0 --arch x86_64                # Build all libraries for x86_64
  $0 libdesock --arch arm         # Build libdesock for ARM

OUTPUT:
  Libraries are placed in: 
    output-preload/glibc/<arch>/ (default)
    output-preload/musl/<arch>/  (with --libc musl)
  Toolchains are pre-downloaded in Docker images

NOTE:
  - Glibc builds use pre-built Bootlin toolchains in an Alpine container
  - Musl builds use the musl toolchains from the main build system
  - Both containers are Alpine-based for consistency
EOF
            exit 0
            ;;
        libdesock|shell-env|shell-helper|shell-bind|shell-reverse|shell-fifo)
            LIBRARIES="$1"
            shift
            ;;
        *)
            # Accept any architecture name and map it
            ARCH_INPUT="$1"
            # Map architecture name if function available
            if type map_arch_name >/dev/null 2>&1; then
                ARCHITECTURES=$(map_arch_name "$ARCH_INPUT")
            else
                ARCHITECTURES="$ARCH_INPUT"
            fi
            shift
            ;;
    esac
done

# Handle clean
if [ "$CLEAN" = true ]; then
    echo "Cleaning preload build artifacts..."
    rm -rf output-preload/
    rm -rf logs-preload/
    echo "Clean complete."
    exit 0
fi

# Check if Docker is available
if ! command -v docker &> /dev/null; then
    echo "Error: Docker is required but not installed"
    exit 1
fi

# No longer checking for preload-libs directory as libraries are built from scripts

# Choose Docker image based on libc type
if [ "$LIBC_TYPE" = "musl" ]; then
    # Use main Alpine container for musl builds
    IMAGE_NAME="sthenos-musl-builder"
    if ! docker images | grep -q "^${IMAGE_NAME} "; then
        echo "Building musl Docker image..."
        docker build -t "${IMAGE_NAME}" -f Dockerfile.musl . || {
            echo "Failed to build Docker image"
            exit 1
        }
    fi
else
    # Use Alpine container for glibc builds (or when both is specified, it will be handled later)
    IMAGE_NAME="sthenos-glibc-builder"
    if ! docker images | grep -q "^${IMAGE_NAME} "; then
        echo "Building glibc Docker image..."
        if [ ! -f "Dockerfile.glibc" ]; then
            echo "Error: Dockerfile.glibc not found"
            exit 1
        fi
        docker build -t "${IMAGE_NAME}" -f Dockerfile.glibc . || {
            echo "Failed to build Docker image"
            exit 1
        }
    fi
fi

# Prepare directories
mkdir -p output-preload
mkdir -p logs-preload
# Don't create toolchains-preload - use the one in Docker image

# Build command
DOCKER_CMD="docker run --rm"
# Don't mount entire directory - be selective to preserve Docker image contents
DOCKER_CMD="$DOCKER_CMD -v $SCRIPT_DIR/output-preload:/build/output-preload"
DOCKER_CMD="$DOCKER_CMD -v $SCRIPT_DIR/logs-preload:/build/logs-preload"
# No longer mounting preload-libs directory

# Container-specific mounts
if [ "$LIBC_TYPE" = "musl" ]; then
    # For musl builds, don't mount toolchains - they're in the Docker image
    DOCKER_CMD="$DOCKER_CMD -v $SCRIPT_DIR/scripts:/build/scripts:ro"
    DOCKER_CMD="$DOCKER_CMD -v $SCRIPT_DIR/preload-libs:/build/preload-libs:ro"
else
    # For glibc builds, use toolchains from Docker image and mount scripts
    # Don't mount toolchains-preload - use the ones in the Docker image
    DOCKER_CMD="$DOCKER_CMD -v $SCRIPT_DIR/scripts:/build/scripts:ro"
    DOCKER_CMD="$DOCKER_CMD -v $SCRIPT_DIR/preload-libs:/build/preload-libs:ro"
fi

# Add environment variables
[ -n "$DEBUG" ] && DOCKER_CMD="$DOCKER_CMD -e DEBUG=1"
[ -n "$LIBC_TYPE" ] && [ "$LIBC_TYPE" != "both" ] && DOCKER_CMD="$DOCKER_CMD -e LIBC_TYPE=$LIBC_TYPE"

if [ "$INTERACTIVE" = true ]; then
    echo "Launching interactive shell in preload build container..."
    echo "Preload sources are in: /build/preload-libs/"
    echo "Build scripts are in: /build/scripts/preload/"
    echo "Output goes to: /build/output-preload/"
    exec $DOCKER_CMD -it "${IMAGE_NAME}" bash
fi

# Build mode
echo "==================================="
echo "Preload Library Build Pipeline"
echo "==================================="
echo "Libraries: $LIBRARIES"
echo "Architectures: $ARCHITECTURES"
echo "Libc: ${LIBC_TYPE}"
echo "Start time: $(date)"
echo

if [ "$LIBC_TYPE" = "both" ]; then
    # For both, we need to handle it differently
    # First build glibc with the preload container
    echo ">>> Building with glibc..."
    ARGS=""
    [ "$LIBRARIES" != "all" ] && ARGS="$LIBRARIES"
    [ "$ARCHITECTURES" != "all" ] && ARGS="$ARGS --arch $ARCHITECTURES"
    [ -n "$DEBUG" ] && ARGS="$ARGS -d"
    "$0" $ARGS --libc glibc || true
    
    # Then build musl with the main container
    echo
    echo ">>> Building with musl..."
    "$0" $ARGS --libc musl || true
    
    echo
    echo "==================================="
    echo "Build Complete!"
    echo "==================================="
    echo "Output structure:"
    echo "  output-preload/glibc/<arch>/*.so"
    echo "  output-preload/musl/<arch>/*.so"
    exit 0
elif [ "$LIBC_TYPE" = "musl" ]; then
    # For musl builds, use the special musl build script
    BUILD_CMD="/build/scripts/build-preload-musl.sh"
else
    # For glibc builds, use the unified build script
    BUILD_CMD="/build/scripts/preload/build-unified.sh"
fi
[ -n "$DEBUG" ] && BUILD_CMD="$BUILD_CMD -d"
BUILD_CMD="$BUILD_CMD $LIBRARIES $ARCHITECTURES"

# Execute build
$DOCKER_CMD "${IMAGE_NAME}" $BUILD_CMD

# Show results
if [ -d "output-preload" ]; then
    echo
    echo "=== Build Results ==="
    
    # Show by libc type
    for libc_dir in output-preload/*/; do
        if [ -d "$libc_dir" ]; then
            libc_type=$(basename "$libc_dir")
            echo "${libc_type}:"
            
            # Show by architecture within each libc type
            for arch_dir in "$libc_dir"*/; do
                if [ -d "$arch_dir" ]; then
                    arch=$(basename "$arch_dir")
                    echo "  $arch:"
                    ls -lh "$arch_dir"*.so 2>/dev/null | awk '{print "    " $9 " (" $5 ")"}' || echo "    (no libraries built)"
                fi
            done
        fi
    done
fi

echo
echo "Build completed at: $(date)"