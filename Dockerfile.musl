# Dockerfile for building security tools with musl libc
# Alpine-based for static musl builds
# Used by: ./build script for main tool compilation
FROM alpine:3.18

# Install build dependencies
RUN apk update && apk add --no-cache \
    build-base \
    gcc g++ make cmake automake autoconf libtool \
    pkgconf \
    git wget curl \
    tar gzip bzip2 xz \
    patch \
    python3 py3-pip \
    bison flex \
    texinfo \
    gawk \
    bc \
    ncurses-dev \
    openssl-dev \
    zlib-dev \
    expat-dev \
    libffi-dev \
    gmp-dev mpc1-dev mpfr-dev \
    bash \
    coreutils \
    linux-headers \
    musl-dev \
    readline-dev \
    libpcap-dev \
    # BSD compatibility headers for sys/queue.h
    bsd-compat-headers \
    # GNU parallel for faster downloads
    parallel

# Create directories
RUN mkdir -p /build/sources /build/toolchains /build/deps-cache /build/output /build/logs && \
    mkdir -p /build/scripts

# Create build user for consistency with glibc pipeline
RUN adduser -D -s /bin/sh builder && \
    echo "builder ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers

# Set ownership
RUN chown -R builder:builder /build

# Switch to builder user
USER builder
WORKDIR /build

# Copy download script and required libraries
COPY --chown=builder:builder scripts/download-toolchains.sh /build/scripts/
COPY --chown=builder:builder scripts/lib/logging.sh /build/scripts/lib/

# Download all musl toolchains during build
# This ensures toolchains are available at runtime
RUN /build/scripts/download-toolchains.sh

# Default command
CMD ["/bin/bash"]